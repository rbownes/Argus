services:
  main-app:
    build:
      context: .
      dockerfile: app/dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - API_KEY=${API_KEY}
      - QUERY_STORAGE_URL=http://item-storage-queries:8000
      - EVALUATION_STORAGE_URL=http://item-storage-metrics:8000
      - JUDGE_SERVICE_URL=http://judge-service:8000
    depends_on:
      item-storage-queries:
        condition: service_started
      item-storage-metrics:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  item-storage-queries:
    build:
      context: .
      dockerfile: item_storage/dockerfile
    ports:
      - "8001:8000"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - API_KEY=${API_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - ITEM_TYPE_NAME=query
      - ITEM_TYPE_CATEGORY_NAME=theme
      - ITEM_STORAGE_TABLE=items_queries
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  item-storage-metrics:
    build:
      context: .
      dockerfile: item_storage/dockerfile
    ports:
      - "8002:8000"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - API_KEY=${API_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - ITEM_TYPE_NAME=metric
      - ITEM_TYPE_CATEGORY_NAME=metric_type
      - ITEM_STORAGE_TABLE=items_metrics
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  judge-service:
    build:
      context: .
      dockerfile: judge_service/dockerfile
    ports:
      - "8003:8000"
    volumes:
      - ./data/judge_service:/app/judge_service_data
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - API_KEY=${API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - MODEL_DEFAULT_TEMPERATURE=${MODEL_DEFAULT_TEMPERATURE:-0.7}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=panopticon
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/panopticon
      - QUERY_STORAGE_URL=http://item-storage-queries:8000
      - EVALUATION_STORAGE_URL=http://item-storage-metrics:8000
    depends_on:
      postgres:
        condition: service_healthy
      item-storage-queries:
        condition: service_started
      item-storage-metrics:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  postgres:
    build:
      context: .
      dockerfile: postgres/Dockerfile
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=panopticon
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  model-registry:
    build:
      context: .
      dockerfile: model_registry/dockerfile
    ports:
      - "8005:8000"
    volumes:
      - ./data/model_registry:/app/model_registry_data
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - API_KEY=${API_KEY}
      - LITELLM_API_KEY=${LITELLM_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LITELLM_MODEL_DEFAULT_TEMPERATURE=${LITELLM_MODEL_DEFAULT_TEMPERATURE:-0.7}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=panopticon
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/panopticon
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  visualization-service:
    build:
      context: .
      dockerfile: visualization_service/dockerfile
    ports:
      - "8004:8000"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - API_KEY=${API_KEY}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=panopticon
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/panopticon
    depends_on:
      postgres:
        condition: service_healthy
      judge-service:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

# No named volumes needed with bind mounts
