# Stage 1: Frontend build
FROM node:18-alpine AS frontend-build

WORKDIR /app/frontend

# Copy frontend package.json and package-lock.json (if available)
COPY visualization_service/frontend/package*.json ./

# Install npm packages
RUN npm install

# Copy frontend source code
COPY visualization_service/frontend/ ./

# Build frontend
RUN npm run build

# Stage 2: Backend build
FROM python:3.11-slim AS backend-build

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy Python dependencies
COPY visualization_service/requirements.txt ./ 

# Create a virtual environment and install dependencies
RUN python -m venv /venv
ENV PATH="/venv/bin:$PATH"
RUN pip install --no-cache-dir -U pip && \
    pip install --no-cache-dir -r requirements.txt

# Stage 3: Final image
FROM python:3.11-slim

WORKDIR /app

# Copy the virtual environment from backend-build
COPY --from=backend-build /venv /venv
ENV PATH="/venv/bin:$PATH"

# Copy the frontend build from frontend-build
COPY --from=frontend-build /app/frontend/dist /app/visualization_service/frontend/dist

# Copy backend code
COPY visualization_service/*.py /app/visualization_service/

# Copy shared code
COPY shared/ /app/shared/

# Create a non-root user and switch to it
RUN useradd -m appuser && chown -R appuser:appuser /app
USER appuser

# Set Python path and entrypoint
ENV PYTHONPATH=/app
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Run the application with Uvicorn server
CMD ["uvicorn", "visualization_service.api:app", "--host", "0.0.0.0", "--port", "8000"]
